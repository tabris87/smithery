{
  "stats": {
    "suites": 8,
    "tests": 29,
    "passes": 29,
    "pending": 0,
    "failures": 0,
    "start": "2020-10-21T10:03:15.821Z",
    "end": "2020-10-21T10:03:15.857Z",
    "duration": 36,
    "testsRegistered": 29,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ec5e2dbf-4004-4824-8473-dbe1c8bcfde2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8eec1056-46b0-4e56-8c45-0d10c4eb8c4a",
          "title": "Check the GeneratorFactory",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\Generator.spec.ts",
          "file": "\\src\\Generator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GenFactory should be fine after creation",
              "fullTitle": "Check the GeneratorFactory GenFactory should be fine after creation",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(new Generator_1.GeneratorFactory()).not.to.be.undefined;",
              "err": {},
              "uuid": "06b96770-a47d-4596-8e3f-05fc3dd13dc0",
              "parentUUID": "8eec1056-46b0-4e56-8c45-0d10c4eb8c4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GeneratorFactory should contain at least the \"File\" and \"Folder\" generators.",
              "fullTitle": "Check the GeneratorFactory GeneratorFactory should contain at least the \"File\" and \"Folder\" generators.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const genFact = new Generator_1.GeneratorFactory();\nchai_1.expect(genFact.getGenerator(enums_1.FileType.File)).not.to.be.undefined;\nchai_1.expect(genFact.getGenerator(enums_1.FileType.Folder)).not.to.be.undefined;",
              "err": {},
              "uuid": "b19d28e3-86a2-40ce-8eff-449e149cfb5b",
              "parentUUID": "8eec1056-46b0-4e56-8c45-0d10c4eb8c4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "06b96770-a47d-4596-8e3f-05fc3dd13dc0",
            "b19d28e3-86a2-40ce-8eff-449e149cfb5b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7215b3f1-dddd-41ec-b742-a7572bdf90ec",
          "title": "Check the generating ability of the DirectoryGenerator",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\generators\\DirectoryGenerator.spec.ts",
          "file": "\\src\\generators\\DirectoryGenerator.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Check the generating ability of the DirectoryGenerator\"",
              "fullTitle": "Check the generating ability of the DirectoryGenerator \"before each\" hook in \"Check the generating ability of the DirectoryGenerator\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mkdirSyncStub = sinon_1.stub(fs, 'mkdirSync');\nmkdirSyncStub.callsFake(fakeMkdirSync);\nwriteFileSyncStub = sinon_1.stub(fs, 'writeFileSync');",
              "err": {},
              "uuid": "73edf03b-476d-4ba0-a3ca-f675b70f71a1",
              "parentUUID": "7215b3f1-dddd-41ec-b742-a7572bdf90ec",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Check the generating ability of the DirectoryGenerator\"",
              "fullTitle": "Check the generating ability of the DirectoryGenerator \"after each\" hook in \"Check the generating ability of the DirectoryGenerator\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "writeFileSyncStub.restore();\nmkdirSyncStub.restore();",
              "err": {},
              "uuid": "ec3e5193-f13b-432a-b476-eaad93414ddd",
              "parentUUID": "7215b3f1-dddd-41ec-b742-a7572bdf90ec",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Check a single folder to be generated ",
              "fullTitle": "Check the generating ability of the DirectoryGenerator Check a single folder to be generated ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const AST = new Node_1.Node();\nAST.children = [];\nAST.type = enums_1.FileType.Folder;\nAST.name = 'testFolder';\nconst dg = new DirectoryGenerator_1.DirectoryGenerator();\ndg.generate(AST, { filePath: 'testPath' });\nchai_1.expect(mkdirSyncStub.calledOnce).to.be.true;\nchai_1.expect(mkdirSyncStub.calledWith(path_1.join('testPath', 'testFolder'))).to.be.true;",
              "err": {},
              "uuid": "81cd2614-404f-4c5c-8d1b-498ff8557a1a",
              "parentUUID": "7215b3f1-dddd-41ec-b742-a7572bdf90ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check a single file to be generated",
              "fullTitle": "Check the generating ability of the DirectoryGenerator Check a single file to be generated",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const AST = new Node_1.Node();\nAST.type = enums_1.FileType.File;\nAST.name = 'testFile.test';\nAST.content = 'This is my test-content';\nconst dg = new DirectoryGenerator_1.DirectoryGenerator();\ndg.generate(AST, { filePath: 'testPath' });\nchai_1.expect(writeFileSyncStub.calledOnce).to.be.true;\nchai_1.expect(writeFileSyncStub.calledWith(path_1.join('testPath', 'testFile.test'), 'This is my test-content')).to.be.true;",
              "err": {},
              "uuid": "97962105-9542-4469-88f8-5a18a71a64db",
              "parentUUID": "7215b3f1-dddd-41ec-b742-a7572bdf90ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check a single file nested within a folder to be generated",
              "fullTitle": "Check the generating ability of the DirectoryGenerator Check a single file nested within a folder to be generated",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const AST_File = new Node_1.Node();\nAST_File.type = enums_1.FileType.File;\nAST_File.name = 'testFile.test';\nAST_File.content = 'This is my test-content';\nconst AST_Folder = new Node_1.Node();\nAST_Folder.children = [AST_File];\nAST_Folder.type = enums_1.FileType.Folder;\nAST_Folder.name = 'testFolder';\nconst dg = new DirectoryGenerator_1.DirectoryGenerator();\ndg.generate(AST_Folder, { filePath: 'testPath' });\nchai_1.expect(mkdirSyncStub.calledOnce).to.be.true;\nchai_1.expect(mkdirSyncStub.calledWith(path_1.join('testPath', 'testFolder'))).to.be.true;\nchai_1.expect(writeFileSyncStub.calledOnce).to.be.true;\nchai_1.expect(writeFileSyncStub.calledWith(path_1.join('testPath', 'testFolder', 'testFile.test'), 'This is my test-content')).to.be.true;",
              "err": {},
              "uuid": "4fdf23ce-9ecf-4d1d-bff7-9bd414c703a2",
              "parentUUID": "7215b3f1-dddd-41ec-b742-a7572bdf90ec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "81cd2614-404f-4c5c-8d1b-498ff8557a1a",
            "97962105-9542-4469-88f8-5a18a71a64db",
            "4fdf23ce-9ecf-4d1d-bff7-9bd414c703a2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6b2d7adf-e1a9-4ef8-8e3a-4c5eccfc15a9",
          "title": "Check the ImposerClass to work properly with given informations",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\Imposer.spec.ts",
          "file": "\\src\\Imposer.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook: Setup the Imposer in \"Check the ImposerClass to work properly with given informations\"",
              "fullTitle": "Check the ImposerClass to work properly with given informations \"before each\" hook: Setup the Imposer in \"Check the ImposerClass to work properly with given informations\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const pf = new Parser_1.ParserFactory();\nconst gf = new Generator_1.GeneratorFactory();\nconst rs = new RuleSet_1.RuleSet();\nimp = new Imposer_1.Imposer(pf, gf, rs);",
              "err": {},
              "uuid": "682c7f1d-29b9-44bf-9234-294f4c9a5548",
              "parentUUID": "6b2d7adf-e1a9-4ef8-8e3a-4c5eccfc15a9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check if imposer is successfully initialized",
              "fullTitle": "Check the ImposerClass to work properly with given informations Check if imposer is successfully initialized",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(imp).not.to.be.undefined;",
              "err": {},
              "uuid": "a173221d-437c-4097-95d1-320eb29d2fab",
              "parentUUID": "6b2d7adf-e1a9-4ef8-8e3a-4c5eccfc15a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if new ParserFactory is assignable",
              "fullTitle": "Check the ImposerClass to work properly with given informations Check if new ParserFactory is assignable",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orig_parser = imp.getParserFactory();\nconst new_parser = new Parser_1.ParserFactory();\nimp.setParserFactory(new_parser);\nchai_1.expect(imp.getParserFactory()).not.to.be.undefined;\nchai_1.expect(imp.getParserFactory()).not.equal(orig_parser);",
              "err": {},
              "uuid": "5d8a785e-c176-45be-baed-ef0c742250cd",
              "parentUUID": "6b2d7adf-e1a9-4ef8-8e3a-4c5eccfc15a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if new GeneratorFactory is assignable",
              "fullTitle": "Check the ImposerClass to work properly with given informations Check if new GeneratorFactory is assignable",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orig_generator = imp.getGeneratorFactory();\nconst new_generator = new Generator_1.GeneratorFactory();\nimp.setGeneratorFactory(new_generator);\nchai_1.expect(imp.getGeneratorFactory()).not.to.be.undefined;\nchai_1.expect(imp.getGeneratorFactory()).not.equal(orig_generator);",
              "err": {},
              "uuid": "d717e6e0-7ad0-4f2a-ae3d-a0e4abf23399",
              "parentUUID": "6b2d7adf-e1a9-4ef8-8e3a-4c5eccfc15a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if new RuleSet is assignable",
              "fullTitle": "Check the ImposerClass to work properly with given informations Check if new RuleSet is assignable",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orig_ruleSet = imp.getRuleSet();\nconst new_ruleSet = new RuleSet_1.RuleSet();\nimp.setRuleSet(new_ruleSet);\nchai_1.expect(imp.getRuleSet()).not.to.be.undefined;\nchai_1.expect(imp.getRuleSet()).not.equal(orig_ruleSet);",
              "err": {},
              "uuid": "8b081952-a39a-4863-b378-1230ed55a4c6",
              "parentUUID": "6b2d7adf-e1a9-4ef8-8e3a-4c5eccfc15a9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a173221d-437c-4097-95d1-320eb29d2fab",
            "5d8a785e-c176-45be-baed-ef0c742250cd",
            "d717e6e0-7ad0-4f2a-ae3d-a0e4abf23399",
            "8b081952-a39a-4863-b378-1230ed55a4c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "46f01566-ffa4-44f8-87b5-e3d06c370939",
          "title": "Check the ParserFactory",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\Parser.spec.ts",
          "file": "\\src\\Parser.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "ParserFactory should be fine after creation",
              "fullTitle": "Check the ParserFactory ParserFactory should be fine after creation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(new Parser_1.ParserFactory()).not.to.be.undefined;",
              "err": {},
              "uuid": "a5dad86d-7050-4d77-92be-8f7d8af26f4c",
              "parentUUID": "46f01566-ffa4-44f8-87b5-e3d06c370939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GeneratorFactory should contain at least the \"File\" and \"Folder\" generators.",
              "fullTitle": "Check the ParserFactory GeneratorFactory should contain at least the \"File\" and \"Folder\" generators.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const parseFact = new Parser_1.ParserFactory();\nchai_1.expect(parseFact.getParser(enums_1.FileType.File)).not.to.be.undefined;\nchai_1.expect(parseFact.getParser(enums_1.FileType.Folder)).not.to.be.undefined;",
              "err": {},
              "uuid": "8b684c24-0e86-4e56-b81b-473523690c8d",
              "parentUUID": "46f01566-ffa4-44f8-87b5-e3d06c370939",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a5dad86d-7050-4d77-92be-8f7d8af26f4c",
            "8b684c24-0e86-4e56-b81b-473523690c8d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8f1f6cf8-e19b-4951-85d3-652c9cd53ca8",
          "title": "Check if the Directory Parser correctly parses file systems into the espree AST",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\parsers\\DirectoryParser.spec.ts",
          "file": "\\src\\parsers\\DirectoryParser.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check the correct visitor keys",
              "fullTitle": "Check if the Directory Parser correctly parses file systems into the espree AST Check the correct visitor keys",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dp = new DirectoryParser_1.DirectoryParser();\nchai_1.expect(dp).to.be.not.undefined;\nchai_1.expect(dp.getVisitorKeys()).to.be.eql({\n    Folder: ['children'],\n    File: []\n});",
              "err": {},
              "uuid": "672ecfaf-0cb2-440f-88cf-de559177b4b9",
              "parentUUID": "8f1f6cf8-e19b-4951-85d3-652c9cd53ca8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check a single file to be parsed into the AST representation",
              "fullTitle": "Check if the Directory Parser correctly parses file systems into the espree AST Check a single file to be parsed into the AST representation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const lstatSyncStub = sinon_1.stub(fs, 'lstatSync');\nlstatSyncStub.returns({\n    isFile: () => true,\n    isDirectory: () => false,\n    isBlockDevice: () => false,\n    isCharacterDevice: () => false,\n    isSymbolicLink: () => false,\n    isFIFO: () => false,\n    isSocket: () => false,\n    dev: 0,\n    ino: 0,\n    mode: 0,\n    nlink: 0,\n    uid: 0,\n    gid: 0,\n    rdev: 0,\n    size: 2000,\n    blksize: 200,\n    blocks: 2,\n    atimeMs: 2000,\n    mtimeMs: 2000,\n    ctimeMs: 2000,\n    birthtimeMs: 2000,\n    atime: new Date(),\n    mtime: new Date(),\n    ctime: new Date(),\n    birthtime: new Date()\n});\nconst readFileSyncStub = sinon_1.stub(fs, 'readFileSync');\nreadFileSyncStub.returns('This is the correct File content');\nconst dp = new DirectoryParser_1.DirectoryParser();\nconst ast = dp.parse('testPath');\nchai_1.expect(ast).not.to.be.undefined;\nchai_1.expect(ast.type).to.be.equal(enums_1.FileType.File);\nchai_1.expect(ast.content).to.be.equal('This is the correct File content');\nreadFileSyncStub.restore();\nlstatSyncStub.restore();",
              "err": {},
              "uuid": "f4eeb690-f863-4a83-9a7d-9f2192004817",
              "parentUUID": "8f1f6cf8-e19b-4951-85d3-652c9cd53ca8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check one folder one subfile to AST production",
              "fullTitle": "Check if the Directory Parser correctly parses file systems into the espree AST Check one folder one subfile to AST production",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const lstatSyncStub = sinon_1.stub(fs, 'lstatSync');\nlstatSyncStub.onFirstCall()\n    .returns({\n    isFile: () => false,\n    isDirectory: () => true,\n    isBlockDevice: () => false,\n    isCharacterDevice: () => false,\n    isSymbolicLink: () => false,\n    isFIFO: () => false,\n    isSocket: () => false,\n    dev: 0,\n    ino: 0,\n    mode: 0,\n    nlink: 0,\n    uid: 0,\n    gid: 0,\n    rdev: 0,\n    size: 2000,\n    blksize: 200,\n    blocks: 2,\n    atimeMs: 2000,\n    mtimeMs: 2000,\n    ctimeMs: 2000,\n    birthtimeMs: 2000,\n    atime: new Date(),\n    mtime: new Date(),\n    ctime: new Date(),\n    birthtime: new Date()\n}).onSecondCall().returns({\n    isFile: () => true,\n    isDirectory: () => false,\n    isBlockDevice: () => false,\n    isCharacterDevice: () => false,\n    isSymbolicLink: () => false,\n    isFIFO: () => false,\n    isSocket: () => false,\n    dev: 0,\n    ino: 0,\n    mode: 0,\n    nlink: 0,\n    uid: 0,\n    gid: 0,\n    rdev: 0,\n    size: 2000,\n    blksize: 200,\n    blocks: 2,\n    atimeMs: 2000,\n    mtimeMs: 2000,\n    ctimeMs: 2000,\n    birthtimeMs: 2000,\n    atime: new Date(),\n    mtime: new Date(),\n    ctime: new Date(),\n    birthtime: new Date()\n});\nconst readFileSyncStub = sinon_1.stub(fs, 'readFileSync');\nreadFileSyncStub.returns('This is the correct File content');\nconst readdirSyncStub = sinon_1.stub(fs, 'readdirSync');\nreaddirSyncStub.onFirstCall().returns(['testFile']);\nconst dp = new DirectoryParser_1.DirectoryParser();\nconst ast = dp.parse('testPath');\nchai_1.expect(ast).not.to.be.undefined;\nchai_1.expect(ast.type).to.be.equal(enums_1.FileType.Folder);\nchai_1.expect(ast.children).not.to.be.undefined;\nchai_1.expect(ast.children ? ast.children[0] : undefined).not.to.be.undefined;\nchai_1.expect(ast.children ? ast.children[0].type : 'FalseType').to.be.equal(enums_1.FileType.File);\nchai_1.expect(ast.children ? ast.children[0].content : 'FalseContent').to.be.equal('This is the correct File content');",
              "err": {},
              "uuid": "33e43cdf-d321-4fe6-8841-4ed4be3cfcb6",
              "parentUUID": "8f1f6cf8-e19b-4951-85d3-652c9cd53ca8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "672ecfaf-0cb2-440f-88cf-de559177b4b9",
            "f4eeb690-f863-4a83-9a7d-9f2192004817",
            "33e43cdf-d321-4fe6-8841-4ed4be3cfcb6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c2e6de78-275c-47d2-96a3-3d23ba5a7bf3",
          "title": "Check the Rule Class",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\Rule.spec.ts",
          "file": "\\src\\Rule.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A Rule should be build up just by providing simple information",
              "fullTitle": "Check the Rule Class A Rule should be build up just by providing simple information",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ruleSetup = {\n    apply: (base, feature, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test'\n};\nconst rule = new Rule_1.Rule(ruleSetup);\nchai_1.expect(rule).not.to.be.undefined;",
              "err": {},
              "uuid": "e447a6ef-3aa1-46b1-abf5-e3972ff4a6dd",
              "parentUUID": "c2e6de78-275c-47d2-96a3-3d23ba5a7bf3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A rule should provide correctly witch language it supports, either normal written, uppercase, lowercase",
              "fullTitle": "Check the Rule Class A rule should provide correctly witch language it supports, either normal written, uppercase, lowercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ruleSetup = {\n    apply: (base, feature, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test'\n};\nconst rule = new Rule_1.Rule(ruleSetup);\nchai_1.expect(rule.supportsLanguage('testing')).to.be.true;\nchai_1.expect(rule.supportsLanguage('Testing')).to.be.true;\nchai_1.expect(rule.supportsLanguage('TESTING')).to.be.true;\nchai_1.expect(rule.supportsLanguage('TeStInG')).to.be.true;\nchai_1.expect(rule.supportsLanguage('Whatsoever')).not.to.be.true;",
              "err": {},
              "uuid": "d5209d2a-e9c8-4d55-abcd-fc004067996e",
              "parentUUID": "c2e6de78-275c-47d2-96a3-3d23ba5a7bf3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A rule states if it fits to a node combination",
              "fullTitle": "Check the Rule Class A rule states if it fits to a node combination",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ruleSetup = {\n    apply: (base, feature, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test'\n};\nconst rule = new Rule_1.Rule(ruleSetup);\n//setting up the nodes\nconst baseNode = new Node_1.Node();\nconst featureNode = new Node_1.Node();\nbaseNode.path = 'test';\nfeatureNode.path = 'test';\nchai_1.expect(rule.isMatching(baseNode, featureNode)).to.be.true;\n//change the combination of nodes\nfeatureNode.path = 'test2';\nchai_1.expect(rule.isMatching(baseNode, featureNode)).to.be.false;",
              "err": {},
              "uuid": "c9b6c086-a7a8-44e5-bea1-a78b941aa74c",
              "parentUUID": "c2e6de78-275c-47d2-96a3-3d23ba5a7bf3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A rule states if it fits to a node combination, extended by node properties",
              "fullTitle": "Check the Rule Class A rule states if it fits to a node combination, extended by node properties",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ruleSetup = {\n    apply: (base, feature, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test[wat]',\n    selectorFeature: 'test[wat=foo]'\n};\nconst rule = new Rule_1.Rule(ruleSetup);\n//setting up the nodes\nconst baseNode = new Node_1.Node();\nconst featureNode = new Node_1.Node();\nbaseNode.path = 'test';\nfeatureNode.path = 'test';\nbaseNode.setAttribute('wat', 'foo');\nfeatureNode.setAttribute('wat', 'foo');\nchai_1.expect(rule.isMatching(baseNode, featureNode)).to.be.true;",
              "err": {},
              "uuid": "5da15aff-5d32-4fcf-ad86-dc8d7e231ea1",
              "parentUUID": "c2e6de78-275c-47d2-96a3-3d23ba5a7bf3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A rule states if it fits to a node combination, and is apply to apply the solution",
              "fullTitle": "Check the Rule Class A rule states if it fits to a node combination, and is apply to apply the solution",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ruleSetup = {\n    apply: (base, feature, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test[wat]',\n    selectorFeature: 'test[wat=foo]'\n};\nconst rule = new Rule_1.Rule(ruleSetup);\n//setting up the nodes\nconst baseNode = new Node_1.Node();\nconst featureNode = new Node_1.Node();\nbaseNode.path = 'test';\nfeatureNode.path = 'test';\nbaseNode.setAttribute('wat', 'foo');\nfeatureNode.setAttribute('wat', 'foo');\nchai_1.expect(rule.isMatching(baseNode, featureNode)).to.be.true;\nchai_1.expect(rule.apply).to.be.not.undefined;\nconst rs = new RuleSet_1.RuleSet();\nconst pf = new Parser_1.ParserFactory();\nconst gf = new Generator_1.GeneratorFactory();\nconst imp = new Imposer_1.Imposer(pf, gf, rs);\nchai_1.expect(rule.apply(baseNode, featureNode, imp)).to.be.not.undefined;",
              "err": {},
              "uuid": "ec83dfd4-cea4-4499-8969-889c29b91e73",
              "parentUUID": "c2e6de78-275c-47d2-96a3-3d23ba5a7bf3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e447a6ef-3aa1-46b1-abf5-e3972ff4a6dd",
            "d5209d2a-e9c8-4d55-abcd-fc004067996e",
            "c9b6c086-a7a8-44e5-bea1-a78b941aa74c",
            "5da15aff-5d32-4fcf-ad86-dc8d7e231ea1",
            "ec83dfd4-cea4-4499-8969-889c29b91e73"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ce0e7c59-a959-4c1b-83d6-0fedede846df",
          "title": "Check the RuleSet",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\RuleSet.spec.ts",
          "file": "\\src\\RuleSet.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "RuleSet should be fine after creation without parameters",
              "fullTitle": "Check the RuleSet RuleSet should be fine after creation without parameters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(new RuleSet_1.RuleSet()).not.to.be.undefined;",
              "err": {},
              "uuid": "846cfbea-8cd9-44cc-92f0-b4b722bcb2e6",
              "parentUUID": "ce0e7c59-a959-4c1b-83d6-0fedede846df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RuleSet should contain the file impose pattern, if no other rules are provided",
              "fullTitle": "Check the RuleSet RuleSet should contain the file impose pattern, if no other rules are provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nchai_1.expect(rs.getRules().length).equals(1);",
              "err": {},
              "uuid": "e10edacd-e3b3-4be5-b7ed-27ad974da2c8",
              "parentUUID": "ce0e7c59-a959-4c1b-83d6-0fedede846df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "After coping a RuleSet, they should be not the same, but do not differ within thier rules",
              "fullTitle": "Check the RuleSet After coping a RuleSet, they should be not the same, but do not differ within thier rules",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nconst rsCopy = rs.copy();\nchai_1.expect(rsCopy).not.to.be.equal(rs);\nchai_1.expect(rsCopy.getRules().length).equals(rs.getRules().length);",
              "err": {},
              "uuid": "7d6ec090-763a-44e7-aace-e6e5c3a3f844",
              "parentUUID": "ce0e7c59-a959-4c1b-83d6-0fedede846df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if a manually assigned rule, is available",
              "fullTitle": "Check the RuleSet Check if a manually assigned rule, is available",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nrs.addRule({\n    apply: (baseFST, featureFST, context) => {\n        return new Node_1.Node();\n    },\n    target: 'test',\n    selector: 'test'\n});\nchai_1.expect(rs.getRules().length).equals(2);",
              "err": {},
              "uuid": "a7fbc059-d2c9-4c5d-8bd4-eee9002fb406",
              "parentUUID": "ce0e7c59-a959-4c1b-83d6-0fedede846df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if a many manually assigned rules, are available",
              "fullTitle": "Check the RuleSet Check if a many manually assigned rules, are available",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nconst manRules = [{\n        apply: (baseFST, featureFST, context) => {\n            return new Node_1.Node();\n        },\n        target: 'test',\n        selector: 'test'\n    }, {\n        apply: (baseFST, featureFST, context) => {\n            return new Node_1.Node();\n        },\n        target: 'test2',\n        selector: 'test'\n    }, {\n        apply: (baseFST, featureFST, context) => {\n            return new Node_1.Node();\n        },\n        target: 'test2',\n        selector: 'test'\n    }];\nrs.addMultipleRules(manRules);\nchai_1.expect(rs.getRules().length).equals(4);",
              "err": {},
              "uuid": "4f22d3e9-aac5-4039-b676-edc38fb7fc60",
              "parentUUID": "ce0e7c59-a959-4c1b-83d6-0fedede846df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if custom rules are used for processing",
              "fullTitle": "Check the RuleSet Check if custom rules are used for processing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nconst rule = {\n    apply: (baseFST, featureFST, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test',\n    selectorFeature: 'test'\n};\n//setting up the nodes\nconst baseNode = new Node_1.Node();\nconst featureNode = new Node_1.Node();\nbaseNode.path = 'test';\nfeatureNode.path = 'test';\n//add the rule\nrs.addRule(rule);\nchai_1.expect(rs.getMatchingRule(baseNode, featureNode)).not.to.be.undefined;",
              "err": {},
              "uuid": "894540e9-a46d-4c39-9ac1-c5e492800d4a",
              "parentUUID": "ce0e7c59-a959-4c1b-83d6-0fedede846df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if language limiting are used for processing",
              "fullTitle": "Check the RuleSet Check if language limiting are used for processing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nconst rule = {\n    apply: (baseFST, featureFST, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test',\n    selectorFeature: 'test'\n};\n//add the rule\nrs.addRule(rule);\n//setting up the nodes\nconst baseNode = new Node_1.Node();\nconst featureNode = new Node_1.Node();\nbaseNode.path = 'test';\nfeatureNode.path = 'test';\n//setting language limit to 'test'\nrs.limitToLanguage('testing');\nchai_1.expect(rs.getMatchingRule(baseNode, featureNode)).not.to.be.undefined;\n//setting language limit to 'File', has to be undefined, because no rule for path 'test' available\nrs.limitToLanguage('File');\nchai_1.expect(rs.getMatchingRule(baseNode, featureNode)).to.be.undefined;\n//resetting language limit\nrs.limitToLanguage();\nchai_1.expect(rs.getMatchingRule(baseNode, featureNode)).not.to.be.undefined;",
              "err": {},
              "uuid": "1fa55f3d-be48-43ed-8982-944f366706c0",
              "parentUUID": "ce0e7c59-a959-4c1b-83d6-0fedede846df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "846cfbea-8cd9-44cc-92f0-b4b722bcb2e6",
            "e10edacd-e3b3-4be5-b7ed-27ad974da2c8",
            "7d6ec090-763a-44e7-aace-e6e5c3a3f844",
            "a7fbc059-d2c9-4c5d-8bd4-eee9002fb406",
            "4f22d3e9-aac5-4039-b676-edc38fb7fc60",
            "894540e9-a46d-4c39-9ac1-c5e492800d4a",
            "1fa55f3d-be48-43ed-8982-944f366706c0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ce3f4c79-1414-423b-bd6c-31c9353ecfac",
          "title": "Check the Utility Class Node, to prove it is correct working",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\utils\\Node.spec.ts",
          "file": "\\src\\utils\\Node.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check if Node is createable without any parameters",
              "fullTitle": "Check the Utility Class Node, to prove it is correct working Check if Node is createable without any parameters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(new Node_1.Node()).not.to.be.undefined;",
              "err": {},
              "uuid": "1eb78c96-02da-4a7d-9a38-aa81e78a92c5",
              "parentUUID": "ce3f4c79-1414-423b-bd6c-31c9353ecfac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if Node creates with position parameter",
              "fullTitle": "Check the Utility Class Node, to prove it is correct working Check if Node creates with position parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const n = new Node_1.Node(1);\nchai_1.expect(n).not.to.be.undefined;\nchai_1.expect(n.start).equal(1);",
              "err": {},
              "uuid": "db847ad4-0504-48e9-a621-1e0f1932de5e",
              "parentUUID": "ce3f4c79-1414-423b-bd6c-31c9353ecfac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if Node can be correctly copied, without just copying the node reference",
              "fullTitle": "Check the Utility Class Node, to prove it is correct working Check if Node can be correctly copied, without just copying the node reference",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const n = new Node_1.Node();\nn.type = 'test';\nn.name = 'Test-Name';\nn.path = 'root';\nn.sourePath = 'elsewhere';\nn.setAttribute('att1', 'value1');\nconst copy_n = n.clone();\n//checks\nchai_1.expect(copy_n).not.equal(n);\nchai_1.expect(copy_n.type).equal(n.type);\nchai_1.expect(copy_n.path).equal(n.path);\nchai_1.expect(copy_n.sourcePath).equal(n.sourcePath);\nchai_1.expect(copy_n.getAttribute('att1')).equal(n.getAttribute('att1'));",
              "err": {},
              "uuid": "5def6c52-a857-4da2-948c-5f06b2bbe030",
              "parentUUID": "ce3f4c79-1414-423b-bd6c-31c9353ecfac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1eb78c96-02da-4a7d-9a38-aa81e78a92c5",
            "db847ad4-0504-48e9-a621-1e0f1932de5e",
            "5def6c52-a857-4da2-948c-5f06b2bbe030"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "reports/test-results",
        "reportFilename": "testResults"
      },
      "version": "5.1.0"
    }
  }
}