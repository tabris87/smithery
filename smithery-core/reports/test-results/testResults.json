{
  "stats": {
    "suites": 7,
    "tests": 25,
    "passes": 25,
    "pending": 0,
    "failures": 0,
    "start": "2020-10-19T21:24:10.133Z",
    "end": "2020-10-19T21:24:10.180Z",
    "duration": 47,
    "testsRegistered": 25,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "400fb75c-a73b-4611-8d5e-990241fd427f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4c494349-0596-4784-9ca0-935756acc3dc",
          "title": "Check the GeneratorFactory",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\Generator.spec.ts",
          "file": "\\src\\Generator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GenFactory should be fine after creation",
              "fullTitle": "Check the GeneratorFactory GenFactory should be fine after creation",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(new Generator_1.GeneratorFactory()).not.to.be.undefined;",
              "err": {},
              "uuid": "24505159-4d9a-4f3e-a109-56a3fd69ca70",
              "parentUUID": "4c494349-0596-4784-9ca0-935756acc3dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GeneratorFactory should contain at least the \"File\" and \"Folder\" generators.",
              "fullTitle": "Check the GeneratorFactory GeneratorFactory should contain at least the \"File\" and \"Folder\" generators.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const genFact = new Generator_1.GeneratorFactory();\nchai_1.expect(genFact.getGenerator(enums_1.FileType.File)).not.to.be.undefined;\nchai_1.expect(genFact.getGenerator(enums_1.FileType.Folder)).not.to.be.undefined;",
              "err": {},
              "uuid": "a76d4a17-275d-4dcd-a519-3fc5376522ed",
              "parentUUID": "4c494349-0596-4784-9ca0-935756acc3dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "24505159-4d9a-4f3e-a109-56a3fd69ca70",
            "a76d4a17-275d-4dcd-a519-3fc5376522ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3eb2f2e9-cca3-456c-a295-fffe6804efae",
          "title": "Check the ImposerClass to work properly with given informations",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\Imposer.spec.ts",
          "file": "\\src\\Imposer.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook: Setup the Imposer in \"Check the ImposerClass to work properly with given informations\"",
              "fullTitle": "Check the ImposerClass to work properly with given informations \"before each\" hook: Setup the Imposer in \"Check the ImposerClass to work properly with given informations\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const pf = new Parser_1.ParserFactory();\nconst gf = new Generator_1.GeneratorFactory();\nconst rs = new RuleSet_1.RuleSet();\nimp = new Imposer_1.Imposer(pf, gf, rs);",
              "err": {},
              "uuid": "a69f88fc-678a-40e0-a11d-6139e0f61bb2",
              "parentUUID": "3eb2f2e9-cca3-456c-a295-fffe6804efae",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check if imposer is successfully initialized",
              "fullTitle": "Check the ImposerClass to work properly with given informations Check if imposer is successfully initialized",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(imp).not.to.be.undefined;",
              "err": {},
              "uuid": "b1b39e2e-2ebb-4396-a9a7-47fc13404155",
              "parentUUID": "3eb2f2e9-cca3-456c-a295-fffe6804efae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if new ParserFactory is assignable",
              "fullTitle": "Check the ImposerClass to work properly with given informations Check if new ParserFactory is assignable",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orig_parser = imp.getParserFactory();\nconst new_parser = new Parser_1.ParserFactory();\nimp.setParserFactory(new_parser);\nchai_1.expect(imp.getParserFactory()).not.to.be.undefined;\nchai_1.expect(imp.getParserFactory()).not.equal(orig_parser);",
              "err": {},
              "uuid": "fd3c8d9a-bd2a-4184-8a38-7344bbd1d056",
              "parentUUID": "3eb2f2e9-cca3-456c-a295-fffe6804efae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if new GeneratorFactory is assignable",
              "fullTitle": "Check the ImposerClass to work properly with given informations Check if new GeneratorFactory is assignable",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orig_generator = imp.getGeneratorFactory();\nconst new_generator = new Generator_1.GeneratorFactory();\nimp.setGeneratorFactory(new_generator);\nchai_1.expect(imp.getGeneratorFactory()).not.to.be.undefined;\nchai_1.expect(imp.getGeneratorFactory()).not.equal(orig_generator);",
              "err": {},
              "uuid": "686f7d57-f7b7-4401-b5b9-0c18e7a4dbd2",
              "parentUUID": "3eb2f2e9-cca3-456c-a295-fffe6804efae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if new RuleSet is assignable",
              "fullTitle": "Check the ImposerClass to work properly with given informations Check if new RuleSet is assignable",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orig_ruleSet = imp.getRuleSet();\nconst new_ruleSet = new RuleSet_1.RuleSet();\nimp.setRuleSet(new_ruleSet);\nchai_1.expect(imp.getRuleSet()).not.to.be.undefined;\nchai_1.expect(imp.getRuleSet()).not.equal(orig_ruleSet);",
              "err": {},
              "uuid": "5c7704c2-47b6-4d8c-817a-a4827a374bba",
              "parentUUID": "3eb2f2e9-cca3-456c-a295-fffe6804efae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b1b39e2e-2ebb-4396-a9a7-47fc13404155",
            "fd3c8d9a-bd2a-4184-8a38-7344bbd1d056",
            "686f7d57-f7b7-4401-b5b9-0c18e7a4dbd2",
            "5c7704c2-47b6-4d8c-817a-a4827a374bba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6794272b-e762-45b0-a204-00d71a7d60d4",
          "title": "Check the ParserFactory",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\Parser.spec.ts",
          "file": "\\src\\Parser.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "ParserFactory should be fine after creation",
              "fullTitle": "Check the ParserFactory ParserFactory should be fine after creation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(new Parser_1.ParserFactory()).not.to.be.undefined;",
              "err": {},
              "uuid": "7a821697-036a-4560-9f43-5c4701c054cb",
              "parentUUID": "6794272b-e762-45b0-a204-00d71a7d60d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GeneratorFactory should contain at least the \"File\" and \"Folder\" generators.",
              "fullTitle": "Check the ParserFactory GeneratorFactory should contain at least the \"File\" and \"Folder\" generators.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const parseFact = new Parser_1.ParserFactory();\nchai_1.expect(parseFact.getParser(enums_1.FileType.File)).not.to.be.undefined;\nchai_1.expect(parseFact.getParser(enums_1.FileType.Folder)).not.to.be.undefined;",
              "err": {},
              "uuid": "3f03512e-9399-42b4-bb1c-02e7f3d19262",
              "parentUUID": "6794272b-e762-45b0-a204-00d71a7d60d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7a821697-036a-4560-9f43-5c4701c054cb",
            "3f03512e-9399-42b4-bb1c-02e7f3d19262"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4a34af3a-d7fd-44f1-85aa-0062bf1450bb",
          "title": "Check if the Directory Parser correctly parses file systems into the espree AST",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\parsers\\DirectoryParser.spec.ts",
          "file": "\\src\\parsers\\DirectoryParser.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check the correct visitor keys",
              "fullTitle": "Check if the Directory Parser correctly parses file systems into the espree AST Check the correct visitor keys",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dp = new DirectoryParser_1.DirectoryParser();\nchai_1.expect(dp).to.be.not.undefined;\nchai_1.expect(dp.getVisitorKeys()).to.be.eql({\n    Folder: ['children'],\n    File: []\n});",
              "err": {},
              "uuid": "e6553349-7488-4274-b886-f8527f1ffb62",
              "parentUUID": "4a34af3a-d7fd-44f1-85aa-0062bf1450bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check a single file to be parsed into the AST representation",
              "fullTitle": "Check if the Directory Parser correctly parses file systems into the espree AST Check a single file to be parsed into the AST representation",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const lstatSyncStub = sinon_1.stub(fs, 'lstatSync');\nlstatSyncStub.returns({\n    isFile: () => true,\n    isDirectory: () => false,\n    isBlockDevice: () => false,\n    isCharacterDevice: () => false,\n    isSymbolicLink: () => false,\n    isFIFO: () => false,\n    isSocket: () => false,\n    dev: 0,\n    ino: 0,\n    mode: 0,\n    nlink: 0,\n    uid: 0,\n    gid: 0,\n    rdev: 0,\n    size: 2000,\n    blksize: 200,\n    blocks: 2,\n    atimeMs: 2000,\n    mtimeMs: 2000,\n    ctimeMs: 2000,\n    birthtimeMs: 2000,\n    atime: new Date(),\n    mtime: new Date(),\n    ctime: new Date(),\n    birthtime: new Date()\n});\nconst readFileSyncStub = sinon_1.stub(fs, 'readFileSync');\nreadFileSyncStub.returns('This is the correct File content');\nconst dp = new DirectoryParser_1.DirectoryParser();\nconst ast = dp.parse('testPath');\nchai_1.expect(ast).not.to.be.undefined;\nchai_1.expect(ast.type).to.be.equal(enums_1.FileType.File);\nchai_1.expect(ast.content).to.be.equal('This is the correct File content');",
              "err": {},
              "uuid": "aef2d23c-a480-4082-81b8-bc613a4768be",
              "parentUUID": "4a34af3a-d7fd-44f1-85aa-0062bf1450bb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e6553349-7488-4274-b886-f8527f1ffb62",
            "aef2d23c-a480-4082-81b8-bc613a4768be"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "08c3dda7-2d20-4370-80ca-d7ff50ba04c2",
          "title": "Check the Rule Class",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\Rule.spec.ts",
          "file": "\\src\\Rule.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A Rule should be build up just by providing simple information",
              "fullTitle": "Check the Rule Class A Rule should be build up just by providing simple information",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ruleSetup = {\n    apply: (base, feature, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test'\n};\nconst rule = new Rule_1.Rule(ruleSetup);\nchai_1.expect(rule).not.to.be.undefined;",
              "err": {},
              "uuid": "85e62a82-dd2a-4ee1-82ed-2b11b492f458",
              "parentUUID": "08c3dda7-2d20-4370-80ca-d7ff50ba04c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A rule should provide correctly witch language it supports, either normal written, uppercase, lowercase",
              "fullTitle": "Check the Rule Class A rule should provide correctly witch language it supports, either normal written, uppercase, lowercase",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ruleSetup = {\n    apply: (base, feature, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test'\n};\nconst rule = new Rule_1.Rule(ruleSetup);\nchai_1.expect(rule.supportsLanguage('testing')).to.be.true;\nchai_1.expect(rule.supportsLanguage('Testing')).to.be.true;\nchai_1.expect(rule.supportsLanguage('TESTING')).to.be.true;\nchai_1.expect(rule.supportsLanguage('TeStInG')).to.be.true;\nchai_1.expect(rule.supportsLanguage('Whatsoever')).not.to.be.true;",
              "err": {},
              "uuid": "7874384d-e53b-4f8d-94de-ffac8e519d5e",
              "parentUUID": "08c3dda7-2d20-4370-80ca-d7ff50ba04c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A rule states if it fits to a node combination",
              "fullTitle": "Check the Rule Class A rule states if it fits to a node combination",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ruleSetup = {\n    apply: (base, feature, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test'\n};\nconst rule = new Rule_1.Rule(ruleSetup);\n//setting up the nodes\nconst baseNode = new Node_1.Node();\nconst featureNode = new Node_1.Node();\nbaseNode.path = 'test';\nfeatureNode.path = 'test';\nchai_1.expect(rule.isMatching(baseNode, featureNode)).to.be.true;\n//change the combination of nodes\nfeatureNode.path = 'test2';\nchai_1.expect(rule.isMatching(baseNode, featureNode)).to.be.false;",
              "err": {},
              "uuid": "5098e248-b8ab-45b7-baef-ef9a256f7f58",
              "parentUUID": "08c3dda7-2d20-4370-80ca-d7ff50ba04c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A rule states if it fits to a node combination, extended by node properties",
              "fullTitle": "Check the Rule Class A rule states if it fits to a node combination, extended by node properties",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ruleSetup = {\n    apply: (base, feature, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test[wat]',\n    selectorFeature: 'test[wat=foo]'\n};\nconst rule = new Rule_1.Rule(ruleSetup);\n//setting up the nodes\nconst baseNode = new Node_1.Node();\nconst featureNode = new Node_1.Node();\nbaseNode.path = 'test';\nfeatureNode.path = 'test';\nbaseNode.setAttribute('wat', 'foo');\nfeatureNode.setAttribute('wat', 'foo');\nchai_1.expect(rule.isMatching(baseNode, featureNode)).to.be.true;",
              "err": {},
              "uuid": "712dbc94-c3ce-44f9-b592-f87a4c5fb43f",
              "parentUUID": "08c3dda7-2d20-4370-80ca-d7ff50ba04c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A rule states if it fits to a node combination, and is apply to apply the solution",
              "fullTitle": "Check the Rule Class A rule states if it fits to a node combination, and is apply to apply the solution",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ruleSetup = {\n    apply: (base, feature, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test[wat]',\n    selectorFeature: 'test[wat=foo]'\n};\nconst rule = new Rule_1.Rule(ruleSetup);\n//setting up the nodes\nconst baseNode = new Node_1.Node();\nconst featureNode = new Node_1.Node();\nbaseNode.path = 'test';\nfeatureNode.path = 'test';\nbaseNode.setAttribute('wat', 'foo');\nfeatureNode.setAttribute('wat', 'foo');\nchai_1.expect(rule.isMatching(baseNode, featureNode)).to.be.true;\nchai_1.expect(rule.apply).to.be.not.undefined;\nconst rs = new RuleSet_1.RuleSet();\nconst pf = new Parser_1.ParserFactory();\nconst gf = new Generator_1.GeneratorFactory();\nconst imp = new Imposer_1.Imposer(pf, gf, rs);\nchai_1.expect(rule.apply(baseNode, featureNode, imp)).to.be.not.undefined;",
              "err": {},
              "uuid": "22b5757c-b5aa-4bfa-a562-976a160389dc",
              "parentUUID": "08c3dda7-2d20-4370-80ca-d7ff50ba04c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "85e62a82-dd2a-4ee1-82ed-2b11b492f458",
            "7874384d-e53b-4f8d-94de-ffac8e519d5e",
            "5098e248-b8ab-45b7-baef-ef9a256f7f58",
            "712dbc94-c3ce-44f9-b592-f87a4c5fb43f",
            "22b5757c-b5aa-4bfa-a562-976a160389dc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9348105d-90fa-4765-8a41-096394c83bac",
          "title": "Check the RuleSet",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\RuleSet.spec.ts",
          "file": "\\src\\RuleSet.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "RuleSet should be fine after creation without parameters",
              "fullTitle": "Check the RuleSet RuleSet should be fine after creation without parameters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(new RuleSet_1.RuleSet()).not.to.be.undefined;",
              "err": {},
              "uuid": "03998275-6b6f-49c4-bcfd-cbb9f7a69819",
              "parentUUID": "9348105d-90fa-4765-8a41-096394c83bac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RuleSet should contain the file impose pattern, if no other rules are provided",
              "fullTitle": "Check the RuleSet RuleSet should contain the file impose pattern, if no other rules are provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nchai_1.expect(rs.getRules().length).equals(1);",
              "err": {},
              "uuid": "4dd052a7-dba6-4807-87fa-8232c820f22d",
              "parentUUID": "9348105d-90fa-4765-8a41-096394c83bac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "After coping a RuleSet, they should be not the same, but do not differ within thier rules",
              "fullTitle": "Check the RuleSet After coping a RuleSet, they should be not the same, but do not differ within thier rules",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nconst rsCopy = rs.copy();\nchai_1.expect(rsCopy).not.to.be.equal(rs);\nchai_1.expect(rsCopy.getRules().length).equals(rs.getRules().length);",
              "err": {},
              "uuid": "59ee34cb-7a81-49f1-8f72-101a901c4ff9",
              "parentUUID": "9348105d-90fa-4765-8a41-096394c83bac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if a manually assigned rule, is available",
              "fullTitle": "Check the RuleSet Check if a manually assigned rule, is available",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nrs.addRule({\n    apply: (baseFST, featureFST, context) => {\n        return new Node_1.Node();\n    },\n    target: 'test',\n    selector: 'test'\n});\nchai_1.expect(rs.getRules().length).equals(2);",
              "err": {},
              "uuid": "63671744-2c4a-4c34-9d08-fd5a5e2daa4c",
              "parentUUID": "9348105d-90fa-4765-8a41-096394c83bac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if a many manually assigned rules, are available",
              "fullTitle": "Check the RuleSet Check if a many manually assigned rules, are available",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nconst manRules = [{\n        apply: (baseFST, featureFST, context) => {\n            return new Node_1.Node();\n        },\n        target: 'test',\n        selector: 'test'\n    }, {\n        apply: (baseFST, featureFST, context) => {\n            return new Node_1.Node();\n        },\n        target: 'test2',\n        selector: 'test'\n    }, {\n        apply: (baseFST, featureFST, context) => {\n            return new Node_1.Node();\n        },\n        target: 'test2',\n        selector: 'test'\n    }];\nrs.addMultipleRules(manRules);\nchai_1.expect(rs.getRules().length).equals(4);",
              "err": {},
              "uuid": "7b8d6d9d-807a-49e9-87b6-00dfb9442e12",
              "parentUUID": "9348105d-90fa-4765-8a41-096394c83bac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if custom rules are used for processing",
              "fullTitle": "Check the RuleSet Check if custom rules are used for processing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nconst rule = {\n    apply: (baseFST, featureFST, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test',\n    selectorFeature: 'test'\n};\n//setting up the nodes\nconst baseNode = new Node_1.Node();\nconst featureNode = new Node_1.Node();\nbaseNode.path = 'test';\nfeatureNode.path = 'test';\n//add the rule\nrs.addRule(rule);\nchai_1.expect(rs.getMatchingRule(baseNode, featureNode)).not.to.be.undefined;",
              "err": {},
              "uuid": "9bd88434-7c48-4b01-84d1-9637519691d8",
              "parentUUID": "9348105d-90fa-4765-8a41-096394c83bac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if language limiting are used for processing",
              "fullTitle": "Check the RuleSet Check if language limiting are used for processing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nconst rule = {\n    apply: (baseFST, featureFST, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test',\n    selectorFeature: 'test'\n};\n//add the rule\nrs.addRule(rule);\n//setting up the nodes\nconst baseNode = new Node_1.Node();\nconst featureNode = new Node_1.Node();\nbaseNode.path = 'test';\nfeatureNode.path = 'test';\n//setting language limit to 'test'\nrs.limitToLanguage('testing');\nchai_1.expect(rs.getMatchingRule(baseNode, featureNode)).not.to.be.undefined;\n//setting language limit to 'File', has to be undefined, because no rule for path 'test' available\nrs.limitToLanguage('File');\nchai_1.expect(rs.getMatchingRule(baseNode, featureNode)).to.be.undefined;\n//resetting language limit\nrs.limitToLanguage();\nchai_1.expect(rs.getMatchingRule(baseNode, featureNode)).not.to.be.undefined;",
              "err": {},
              "uuid": "85fcc62e-fe74-4b56-acf2-56c4d02b8c1f",
              "parentUUID": "9348105d-90fa-4765-8a41-096394c83bac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "03998275-6b6f-49c4-bcfd-cbb9f7a69819",
            "4dd052a7-dba6-4807-87fa-8232c820f22d",
            "59ee34cb-7a81-49f1-8f72-101a901c4ff9",
            "63671744-2c4a-4c34-9d08-fd5a5e2daa4c",
            "7b8d6d9d-807a-49e9-87b6-00dfb9442e12",
            "9bd88434-7c48-4b01-84d1-9637519691d8",
            "85fcc62e-fe74-4b56-acf2-56c4d02b8c1f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d8f51bc9-01b3-4166-a352-9b0c02da38c1",
          "title": "Check the Utility Class Node, to prove it is correct working",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\utils\\Node.spec.ts",
          "file": "\\src\\utils\\Node.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check if Node is createable without any parameters",
              "fullTitle": "Check the Utility Class Node, to prove it is correct working Check if Node is createable without any parameters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(new Node_1.Node()).not.to.be.undefined;",
              "err": {},
              "uuid": "ab147ef3-4ba8-4d78-9588-cb52922b5811",
              "parentUUID": "d8f51bc9-01b3-4166-a352-9b0c02da38c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if Node creates with position parameter",
              "fullTitle": "Check the Utility Class Node, to prove it is correct working Check if Node creates with position parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const n = new Node_1.Node(1);\nchai_1.expect(n).not.to.be.undefined;\nchai_1.expect(n.start).equal(1);",
              "err": {},
              "uuid": "4c6feb66-0bbe-44d7-978d-906fe2f90581",
              "parentUUID": "d8f51bc9-01b3-4166-a352-9b0c02da38c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if Node can be correctly copied, without just copying the node reference",
              "fullTitle": "Check the Utility Class Node, to prove it is correct working Check if Node can be correctly copied, without just copying the node reference",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const n = new Node_1.Node();\nn.type = 'test';\nn.name = 'Test-Name';\nn.path = 'root';\nn.sourePath = 'elsewhere';\nn.setAttribute('att1', 'value1');\nconst copy_n = n.clone();\n//checks\nchai_1.expect(copy_n).not.equal(n);\nchai_1.expect(copy_n.type).equal(n.type);\nchai_1.expect(copy_n.path).equal(n.path);\nchai_1.expect(copy_n.sourcePath).equal(n.sourcePath);\nchai_1.expect(copy_n.getAttribute('att1')).equal(n.getAttribute('att1'));",
              "err": {},
              "uuid": "73cb4d77-47a1-43ec-a3c3-b198c0d5cb7f",
              "parentUUID": "d8f51bc9-01b3-4166-a352-9b0c02da38c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ab147ef3-4ba8-4d78-9588-cb52922b5811",
            "4c6feb66-0bbe-44d7-978d-906fe2f90581",
            "73cb4d77-47a1-43ec-a3c3-b198c0d5cb7f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "reports/test-results",
        "reportFilename": "testResults"
      },
      "version": "5.1.0"
    }
  }
}