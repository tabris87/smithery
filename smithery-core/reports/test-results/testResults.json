{
  "stats": {
    "suites": 6,
    "tests": 23,
    "passes": 23,
    "pending": 0,
    "failures": 0,
    "start": "2020-10-07T09:07:53.660Z",
    "end": "2020-10-07T09:07:53.759Z",
    "duration": 99,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "788aec23-de22-4ebc-b1b3-f2aa82e2ffa1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a56e10f1-714d-46c1-8117-cc499bddff86",
          "title": "Check the GeneratorFactory",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\Generator.spec.ts",
          "file": "\\src\\Generator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GenFactory should be fine after creation",
              "fullTitle": "Check the GeneratorFactory GenFactory should be fine after creation",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(new Generator_1.GeneratorFactory()).not.to.be.undefined;",
              "err": {},
              "uuid": "0dbb6055-f2a0-407c-916a-721502cc95aa",
              "parentUUID": "a56e10f1-714d-46c1-8117-cc499bddff86",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GeneratorFactory should contain at least the \"File\" and \"Folder\" generators.",
              "fullTitle": "Check the GeneratorFactory GeneratorFactory should contain at least the \"File\" and \"Folder\" generators.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const genFact = new Generator_1.GeneratorFactory();\nchai_1.expect(genFact.getGenerator(enums_1.FileType.File)).not.to.be.undefined;\nchai_1.expect(genFact.getGenerator(enums_1.FileType.Folder)).not.to.be.undefined;",
              "err": {},
              "uuid": "4c4ea671-85a1-401b-bcd9-efdd822d3d0e",
              "parentUUID": "a56e10f1-714d-46c1-8117-cc499bddff86",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0dbb6055-f2a0-407c-916a-721502cc95aa",
            "4c4ea671-85a1-401b-bcd9-efdd822d3d0e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5a12065c-c919-466c-81f8-b1de4f410d53",
          "title": "Check the ImposerClass to work properly with given informations",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\Imposer.spec.ts",
          "file": "\\src\\Imposer.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook: Setup the Imposer in \"Check the ImposerClass to work properly with given informations\"",
              "fullTitle": "Check the ImposerClass to work properly with given informations \"before each\" hook: Setup the Imposer in \"Check the ImposerClass to work properly with given informations\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const pf = new Parser_1.ParserFactory();\nconst gf = new Generator_1.GeneratorFactory();\nconst rs = new RuleSet_1.RuleSet();\nimp = new Imposer_1.Imposer(pf, gf, rs);",
              "err": {},
              "uuid": "eccf0aa4-f4a4-451b-b46d-b84d16b343a5",
              "parentUUID": "5a12065c-c919-466c-81f8-b1de4f410d53",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check if imposer is successfully initialized",
              "fullTitle": "Check the ImposerClass to work properly with given informations Check if imposer is successfully initialized",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(imp).not.to.be.undefined;",
              "err": {},
              "uuid": "db5fd37c-8749-431c-8418-33c02e31cce0",
              "parentUUID": "5a12065c-c919-466c-81f8-b1de4f410d53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if new ParserFactory is assignable",
              "fullTitle": "Check the ImposerClass to work properly with given informations Check if new ParserFactory is assignable",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orig_parser = imp.getParserFactory();\nconst new_parser = new Parser_1.ParserFactory();\nimp.setParserFactory(new_parser);\nchai_1.expect(imp.getParserFactory()).not.to.be.undefined;\nchai_1.expect(imp.getParserFactory()).not.equal(orig_parser);",
              "err": {},
              "uuid": "24777bcb-6351-4973-bfa5-dc59862d0ee5",
              "parentUUID": "5a12065c-c919-466c-81f8-b1de4f410d53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if new GeneratorFactory is assignable",
              "fullTitle": "Check the ImposerClass to work properly with given informations Check if new GeneratorFactory is assignable",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orig_generator = imp.getGeneratorFactory();\nconst new_generator = new Generator_1.GeneratorFactory();\nimp.setGeneratorFactory(new_generator);\nchai_1.expect(imp.getGeneratorFactory()).not.to.be.undefined;\nchai_1.expect(imp.getGeneratorFactory()).not.equal(orig_generator);",
              "err": {},
              "uuid": "f0ad93a8-340e-4233-a8cf-d0b3eae1c466",
              "parentUUID": "5a12065c-c919-466c-81f8-b1de4f410d53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if new RuleSet is assignable",
              "fullTitle": "Check the ImposerClass to work properly with given informations Check if new RuleSet is assignable",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orig_ruleSet = imp.getRuleSet();\nconst new_ruleSet = new RuleSet_1.RuleSet();\nimp.setRuleSet(new_ruleSet);\nchai_1.expect(imp.getRuleSet()).not.to.be.undefined;\nchai_1.expect(imp.getRuleSet()).not.equal(orig_ruleSet);",
              "err": {},
              "uuid": "bf438612-0d1b-416a-9706-32fe17eeaa3a",
              "parentUUID": "5a12065c-c919-466c-81f8-b1de4f410d53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "db5fd37c-8749-431c-8418-33c02e31cce0",
            "24777bcb-6351-4973-bfa5-dc59862d0ee5",
            "f0ad93a8-340e-4233-a8cf-d0b3eae1c466",
            "bf438612-0d1b-416a-9706-32fe17eeaa3a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "825950a0-4203-40c8-be83-f2b01f75fd91",
          "title": "Check the ParserFactory",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\Parser.spec.ts",
          "file": "\\src\\Parser.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "ParserFactory should be fine after creation",
              "fullTitle": "Check the ParserFactory ParserFactory should be fine after creation",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(new Parser_1.ParserFactory()).not.to.be.undefined;",
              "err": {},
              "uuid": "12923b4f-ad86-413d-8cb0-f416ea5dc5f1",
              "parentUUID": "825950a0-4203-40c8-be83-f2b01f75fd91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GeneratorFactory should contain at least the \"File\" and \"Folder\" generators.",
              "fullTitle": "Check the ParserFactory GeneratorFactory should contain at least the \"File\" and \"Folder\" generators.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const parseFact = new Parser_1.ParserFactory();\nchai_1.expect(parseFact.getParser(enums_1.FileType.File)).not.to.be.undefined;\nchai_1.expect(parseFact.getParser(enums_1.FileType.Folder)).not.to.be.undefined;",
              "err": {},
              "uuid": "7138087f-ad5a-468c-82f3-473209998c37",
              "parentUUID": "825950a0-4203-40c8-be83-f2b01f75fd91",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "12923b4f-ad86-413d-8cb0-f416ea5dc5f1",
            "7138087f-ad5a-468c-82f3-473209998c37"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1a25a532-f5a1-4fed-b2f1-8ff8e32e1ad6",
          "title": "Check the Rule Class",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\Rule.spec.ts",
          "file": "\\src\\Rule.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A Rule should be build up just by providing simple information",
              "fullTitle": "Check the Rule Class A Rule should be build up just by providing simple information",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ruleSetup = {\n    apply: (base, feature, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test'\n};\nconst rule = new Rule_1.Rule(ruleSetup);\nchai_1.expect(rule).not.to.be.undefined;",
              "err": {},
              "uuid": "d546c5a9-2230-4cd7-812e-fd8fab57d1b5",
              "parentUUID": "1a25a532-f5a1-4fed-b2f1-8ff8e32e1ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A rule should provide correctly witch language it supports, either normal written, uppercase, lowercase",
              "fullTitle": "Check the Rule Class A rule should provide correctly witch language it supports, either normal written, uppercase, lowercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ruleSetup = {\n    apply: (base, feature, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test'\n};\nconst rule = new Rule_1.Rule(ruleSetup);\nchai_1.expect(rule.supportsLanguage('testing')).to.be.true;\nchai_1.expect(rule.supportsLanguage('Testing')).to.be.true;\nchai_1.expect(rule.supportsLanguage('TESTING')).to.be.true;\nchai_1.expect(rule.supportsLanguage('TeStInG')).to.be.true;\nchai_1.expect(rule.supportsLanguage('Whatsoever')).not.to.be.true;",
              "err": {},
              "uuid": "04a30755-93eb-4347-81a5-5939db76ea0e",
              "parentUUID": "1a25a532-f5a1-4fed-b2f1-8ff8e32e1ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A rule states if it fits to a node combination",
              "fullTitle": "Check the Rule Class A rule states if it fits to a node combination",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ruleSetup = {\n    apply: (base, feature, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test'\n};\nconst rule = new Rule_1.Rule(ruleSetup);\n//setting up the nodes\nconst baseNode = new Node_1.Node();\nconst featureNode = new Node_1.Node();\nbaseNode.path = 'test';\nfeatureNode.path = 'test';\nchai_1.expect(rule.isMatching(baseNode, featureNode)).to.be.true;\n//change the combination of nodes\nfeatureNode.path = 'test2';\nchai_1.expect(rule.isMatching(baseNode, featureNode)).to.be.false;",
              "err": {},
              "uuid": "2001b829-0d5c-49ac-a2c7-006fdd65c118",
              "parentUUID": "1a25a532-f5a1-4fed-b2f1-8ff8e32e1ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A rule states if it fits to a node combination, extended by node properties",
              "fullTitle": "Check the Rule Class A rule states if it fits to a node combination, extended by node properties",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ruleSetup = {\n    apply: (base, feature, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test[wat]',\n    selectorFeature: 'test[wat=foo]'\n};\nconst rule = new Rule_1.Rule(ruleSetup);\n//setting up the nodes\nconst baseNode = new Node_1.Node();\nconst featureNode = new Node_1.Node();\nbaseNode.path = 'test';\nfeatureNode.path = 'test';\nbaseNode.setAttribute('wat', 'foo');\nfeatureNode.setAttribute('wat', 'foo');\nchai_1.expect(rule.isMatching(baseNode, featureNode)).to.be.true;",
              "err": {},
              "uuid": "4c305b0a-29da-40c3-8f81-485a647b4bcd",
              "parentUUID": "1a25a532-f5a1-4fed-b2f1-8ff8e32e1ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A rule states if it fits to a node combination, and is apply to apply the solution",
              "fullTitle": "Check the Rule Class A rule states if it fits to a node combination, and is apply to apply the solution",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ruleSetup = {\n    apply: (base, feature, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test[wat]',\n    selectorFeature: 'test[wat=foo]'\n};\nconst rule = new Rule_1.Rule(ruleSetup);\n//setting up the nodes\nconst baseNode = new Node_1.Node();\nconst featureNode = new Node_1.Node();\nbaseNode.path = 'test';\nfeatureNode.path = 'test';\nbaseNode.setAttribute('wat', 'foo');\nfeatureNode.setAttribute('wat', 'foo');\nchai_1.expect(rule.isMatching(baseNode, featureNode)).to.be.true;\nchai_1.expect(rule.apply).to.be.not.undefined;\nconst rs = new RuleSet_1.RuleSet();\nconst pf = new Parser_1.ParserFactory();\nconst gf = new Generator_1.GeneratorFactory();\nconst imp = new Imposer_1.Imposer(pf, gf, rs);\nchai_1.expect(rule.apply(baseNode, featureNode, imp)).to.be.not.undefined;",
              "err": {},
              "uuid": "cc71516a-31c6-40e9-a4ea-438c4cde125b",
              "parentUUID": "1a25a532-f5a1-4fed-b2f1-8ff8e32e1ad6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d546c5a9-2230-4cd7-812e-fd8fab57d1b5",
            "04a30755-93eb-4347-81a5-5939db76ea0e",
            "2001b829-0d5c-49ac-a2c7-006fdd65c118",
            "4c305b0a-29da-40c3-8f81-485a647b4bcd",
            "cc71516a-31c6-40e9-a4ea-438c4cde125b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cc802637-c34d-467b-9ce9-3e9591fce466",
          "title": "Check the RuleSet",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\RuleSet.spec.ts",
          "file": "\\src\\RuleSet.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "RuleSet should be fine after creation without parameters",
              "fullTitle": "Check the RuleSet RuleSet should be fine after creation without parameters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(new RuleSet_1.RuleSet()).not.to.be.undefined;",
              "err": {},
              "uuid": "757087ad-f784-4cc7-bcce-b074d0dc0dc8",
              "parentUUID": "cc802637-c34d-467b-9ce9-3e9591fce466",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RuleSet should contain the file impose pattern, if no other rules are provided",
              "fullTitle": "Check the RuleSet RuleSet should contain the file impose pattern, if no other rules are provided",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nchai_1.expect(rs.getRules().length).equals(1);",
              "err": {},
              "uuid": "02ee00e9-9ed5-4f19-b49d-a03bb37ccf8c",
              "parentUUID": "cc802637-c34d-467b-9ce9-3e9591fce466",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "After coping a RuleSet, they should be not the same, but do not differ within thier rules",
              "fullTitle": "Check the RuleSet After coping a RuleSet, they should be not the same, but do not differ within thier rules",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nconst rsCopy = rs.copy();\nchai_1.expect(rsCopy).not.to.be.equal(rs);\nchai_1.expect(rsCopy.getRules().length).equals(rs.getRules().length);",
              "err": {},
              "uuid": "46fc9ef5-7955-493d-a2b7-d228582aa814",
              "parentUUID": "cc802637-c34d-467b-9ce9-3e9591fce466",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if a manually assigned rule, is available",
              "fullTitle": "Check the RuleSet Check if a manually assigned rule, is available",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nrs.addRule({\n    apply: (baseFST, featureFST, context) => {\n        return new Node_1.Node();\n    },\n    target: 'test',\n    selector: 'test'\n});\nchai_1.expect(rs.getRules().length).equals(2);",
              "err": {},
              "uuid": "c7019d87-369b-4e41-8334-fab8fd0cabd6",
              "parentUUID": "cc802637-c34d-467b-9ce9-3e9591fce466",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if a many manually assigned rules, are available",
              "fullTitle": "Check the RuleSet Check if a many manually assigned rules, are available",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nconst manRules = [{\n        apply: (baseFST, featureFST, context) => {\n            return new Node_1.Node();\n        },\n        target: 'test',\n        selector: 'test'\n    }, {\n        apply: (baseFST, featureFST, context) => {\n            return new Node_1.Node();\n        },\n        target: 'test2',\n        selector: 'test'\n    }, {\n        apply: (baseFST, featureFST, context) => {\n            return new Node_1.Node();\n        },\n        target: 'test2',\n        selector: 'test'\n    }];\nrs.addMultipleRules(manRules);\nchai_1.expect(rs.getRules().length).equals(4);",
              "err": {},
              "uuid": "ff1f067f-8eb9-4472-a583-2d2c244fdf0c",
              "parentUUID": "cc802637-c34d-467b-9ce9-3e9591fce466",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if custom rules are used for processing",
              "fullTitle": "Check the RuleSet Check if custom rules are used for processing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nconst rule = {\n    apply: (baseFST, featureFST, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test',\n    selectorFeature: 'test'\n};\n//setting up the nodes\nconst baseNode = new Node_1.Node();\nconst featureNode = new Node_1.Node();\nbaseNode.path = 'test';\nfeatureNode.path = 'test';\n//add the rule\nrs.addRule(rule);\nchai_1.expect(rs.getMatchingRule(baseNode, featureNode)).not.to.be.undefined;",
              "err": {},
              "uuid": "b991996b-b120-4fbe-bd03-33dcb6ef796d",
              "parentUUID": "cc802637-c34d-467b-9ce9-3e9591fce466",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if language limiting are used for processing",
              "fullTitle": "Check the RuleSet Check if language limiting are used for processing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rs = new RuleSet_1.RuleSet();\nconst rule = {\n    apply: (baseFST, featureFST, context) => {\n        return new Node_1.Node();\n    },\n    target: 'testing',\n    selector: 'test',\n    selectorFeature: 'test'\n};\n//add the rule\nrs.addRule(rule);\n//setting up the nodes\nconst baseNode = new Node_1.Node();\nconst featureNode = new Node_1.Node();\nbaseNode.path = 'test';\nfeatureNode.path = 'test';\n//setting language limit to 'test'\nrs.limitToLanguage('testing');\nchai_1.expect(rs.getMatchingRule(baseNode, featureNode)).not.to.be.undefined;\n//setting language limit to 'File', has to be undefined, because no rule for path 'test' available\nrs.limitToLanguage('File');\nchai_1.expect(rs.getMatchingRule(baseNode, featureNode)).to.be.undefined;\n//resetting language limit\nrs.limitToLanguage();\nchai_1.expect(rs.getMatchingRule(baseNode, featureNode)).not.to.be.undefined;",
              "err": {},
              "uuid": "119df36c-9714-4a60-b00e-5a3a1d5b8a84",
              "parentUUID": "cc802637-c34d-467b-9ce9-3e9591fce466",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "757087ad-f784-4cc7-bcce-b074d0dc0dc8",
            "02ee00e9-9ed5-4f19-b49d-a03bb37ccf8c",
            "46fc9ef5-7955-493d-a2b7-d228582aa814",
            "c7019d87-369b-4e41-8334-fab8fd0cabd6",
            "ff1f067f-8eb9-4472-a583-2d2c244fdf0c",
            "b991996b-b120-4fbe-bd03-33dcb6ef796d",
            "119df36c-9714-4a60-b00e-5a3a1d5b8a84"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c59edd34-882d-41b8-af22-cdf153fe71c5",
          "title": "Check the Utility Class Node, to prove it is correct working",
          "fullFile": "E:\\smithery-tooling\\smithery\\smithery-core\\src\\utils\\Node.spec.ts",
          "file": "\\src\\utils\\Node.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check if Node is createable without any parameters",
              "fullTitle": "Check the Utility Class Node, to prove it is correct working Check if Node is createable without any parameters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(new Node_1.Node()).not.to.be.undefined;",
              "err": {},
              "uuid": "c7e173cf-5100-4276-91e1-4d92cf8dbfcc",
              "parentUUID": "c59edd34-882d-41b8-af22-cdf153fe71c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if Node creates with position parameter",
              "fullTitle": "Check the Utility Class Node, to prove it is correct working Check if Node creates with position parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const n = new Node_1.Node(1);\nchai_1.expect(n).not.to.be.undefined;\nchai_1.expect(n.start).equal(1);",
              "err": {},
              "uuid": "ce4fdc97-c083-4c5a-8e4a-892c30675a62",
              "parentUUID": "c59edd34-882d-41b8-af22-cdf153fe71c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check if Node can be correctly copied, without just copying the node reference",
              "fullTitle": "Check the Utility Class Node, to prove it is correct working Check if Node can be correctly copied, without just copying the node reference",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const n = new Node_1.Node();\nn.type = 'test';\nn.name = 'Test-Name';\nn.path = 'root';\nn.sourePath = 'elsewhere';\nn.setAttribute('att1', 'value1');\nconst copy_n = n.clone();\n//checks\nchai_1.expect(copy_n).not.equal(n);\nchai_1.expect(copy_n.type).equal(n.type);\nchai_1.expect(copy_n.path).equal(n.path);\nchai_1.expect(copy_n.sourcePath).equal(n.sourcePath);\nchai_1.expect(copy_n.getAttribute('att1')).equal(n.getAttribute('att1'));",
              "err": {},
              "uuid": "71814d29-ade6-4f3c-8297-d95cfac1d95b",
              "parentUUID": "c59edd34-882d-41b8-af22-cdf153fe71c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c7e173cf-5100-4276-91e1-4d92cf8dbfcc",
            "ce4fdc97-c083-4c5a-8e4a-892c30675a62",
            "71814d29-ade6-4f3c-8297-d95cfac1d95b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "reports/test-results",
        "reportFilename": "testResults"
      },
      "version": "5.1.0"
    }
  }
}